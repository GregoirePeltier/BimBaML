package BimBamBouML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptNote = createDescriptorForNote();
  /*package*/ final ConceptDescriptor myConceptPattern = createDescriptorForPattern();
  /*package*/ final ConceptDescriptor myConceptSound = createDescriptorForSound();
  /*package*/ final ConceptDescriptor myConceptTrack = createDescriptorForTrack();
  /*package*/ final EnumerationDescriptor myEnumerationDuration = new EnumerationDescriptor_Duration();
  /*package*/ final EnumerationDescriptor myEnumerationTone = new EnumerationDescriptor_Tone();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptNote, myConceptPattern, myConceptSound, myConceptTrack);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Note:
        return myConceptNote;
      case LanguageConceptSwitch.Pattern:
        return myConceptPattern;
      case LanguageConceptSwitch.Sound:
        return myConceptSound;
      case LanguageConceptSwitch.Track:
        return myConceptTrack;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationDuration, myEnumerationTone);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForNote() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BimBamBouML", "Note", 0x9cde07181d5f461dL, 0xaed55578dacf102eL, 0x120425afff1eb4baL);
    b.class_(false, false, false);
    b.origin("r:d77e8a00-b786-477d-87ac-e13b035d3730(BimBamBouML.structure)/1298204030419252410");
    b.version(2);
    b.property("duration", 0x120425afff1eb4bdL).type(MetaIdFactory.dataTypeId(0x9cde07181d5f461dL, 0xaed55578dacf102eL, 0x120425afff1eb4bfL)).origin("1298204030419252413").done();
    b.property("tone", 0x120425afff1eb4dcL).type(MetaIdFactory.dataTypeId(0x9cde07181d5f461dL, 0xaed55578dacf102eL, 0x120425afff1eb4d3L)).origin("1298204030419252444").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPattern() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BimBamBouML", "Pattern", 0x9cde07181d5f461dL, 0xaed55578dacf102eL, 0x120425afff1eb4aeL);
    b.class_(false, false, false);
    b.origin("r:d77e8a00-b786-477d-87ac-e13b035d3730(BimBamBouML.structure)/1298204030419252398");
    b.version(2);
    b.property("iteration", 0x120425afff1eb4afL).type(PrimitiveTypeId.INTEGER).origin("1298204030419252399").done();
    b.aggregate("sounds", 0x120425afff1eb4b1L).target(0x9cde07181d5f461dL, 0xaed55578dacf102eL, 0x120425afff1eb4b3L).optional(true).ordered(true).multiple(true).origin("1298204030419252401").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSound() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BimBamBouML", "Sound", 0x9cde07181d5f461dL, 0xaed55578dacf102eL, 0x120425afff1eb4b3L);
    b.class_(false, false, false);
    b.origin("r:d77e8a00-b786-477d-87ac-e13b035d3730(BimBamBouML.structure)/1298204030419252403");
    b.version(2);
    b.aggregate("notes", 0x120425afff1eb4b4L).target(0x9cde07181d5f461dL, 0xaed55578dacf102eL, 0x120425afff1eb4baL).optional(true).ordered(true).multiple(true).origin("1298204030419252404").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTrack() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BimBamBouML", "Track", 0x9cde07181d5f461dL, 0xaed55578dacf102eL, 0x120425afff1eb4a9L);
    b.class_(false, false, true);
    b.origin("r:d77e8a00-b786-477d-87ac-e13b035d3730(BimBamBouML.structure)/1298204030419252393");
    b.version(2);
    b.property("tempo", 0x120425afff1eb4aaL).type(PrimitiveTypeId.INTEGER).origin("1298204030419252394").done();
    b.aggregate("patterns", 0x120425afff1eb4acL).target(0x9cde07181d5f461dL, 0xaed55578dacf102eL, 0x120425afff1eb4aeL).optional(true).ordered(true).multiple(true).origin("1298204030419252396").done();
    return b.create();
  }
}
